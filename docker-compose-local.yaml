version: "3.9"
name: "w2g-builder-services"
services:
  nginx-no-dependencies: &nginx-no-dependencies
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./apps/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./apps/nginx/access.log:/var/log/nginx/access.log:rw
    restart: always
  nginx-dependencies:
    <<: *nginx-no-dependencies
    depends_on:
      messenger-app:
        condition: service_healthy
      file-storage-app:
        condition: service_healthy
      downloader-app:
        condition: service_healthy
      builder-app:
        condition: service_healthy
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: w2g-builder-rabbitmq-1
    restart: always
    env_file:
      - ./env/rabbitmq/local/.env.rabbitmq-local
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./docker-volume/rabbitmq:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 15
  messenger-postgres:
    container_name: messenger-postgres-1
    image: postgres:16
    restart: always
    env_file:
      - ./env/messenger/local/.env.messenger-postgres-local
    ports:
      - 5432:5432
    volumes:
      - ./docker-volume/messenger-postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'",
        ]
      interval: 1s
      timeout: 3s
      retries: 3
  messenger-redis:
    image: redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
  messenger-app:
    build:
      context: ./apps/messenger
      dockerfile: Dockerfile
    env_file:
      - ./env/messenger/local/.env.messenger-local
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
    depends_on:
      messenger-redis:
        condition: service_healthy
      messenger-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    expose:
      - 3000:3000
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
  builder-postgres:
    container_name: builder-postgres-1
    image: postgres:16
    env_file:
      - ./env/builder/local/.env.builder-postgres-local
    restart: always
    ports:
      - 5433:5432
    volumes:
      - ./docker-volume/builder-postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'",
        ]
      interval: 1s
      timeout: 3s
      retries: 3
  builder-app:
    build:
      context: ./apps/builder
      dockerfile: Dockerfile
    env_file:
      - ./env/builder/local/.env.builder-local
    restart: always
    expose:
      - 8000:8080
    depends_on:
      builder-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
  file-storage-postgres:
    container_name: file-storage-postgres-1
    image: postgres:16
    restart: always
    env_file:
      - ./env/file-storage/local/.env.file-storage-postgres-local
    ports:
      - 5434:5432
    volumes:
      - ./docker-volume/file-storage-db-postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'",
        ]
      interval: 1s
      timeout: 3s
      retries: 10
  file-storage-local-s3:
    container_name: file-storage-local-s3-1
    image: localstack/localstack:s3-latest
    restart: always
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    volumes:
      - "./docker-volume/file-storage-local-s3:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
  file-storage-app:
    build:
      context: ./apps/file-storage
      dockerfile: Dockerfile
    env_file:
      - ./env/file-storage/local/.env.file-storage-local
    restart: always
    expose:
      - 8000:8080
    depends_on:
      file-storage-postgres:
        condition: service_healthy
      file-storage-local-s3:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
  downloader-app:
    build:
      context: ./apps/downloader
      dockerfile: Dockerfile
    env_file:
      - ./env/downloader/local/.env.downloader-local
    expose:
      - "3001:3000"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    depends_on:
      file-storage-app:
        condition: service_healthy